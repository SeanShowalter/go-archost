syntax = "proto3";

// package arc is an implementation-independent API and support for a distributed
// files, media, and communication system running a realtime 2D/3D/XR client.
package arc;

// https://stackoverflow.com/questions/43026449/gogo-proto-file-not-found
// import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option csharp_namespace = "ArcXR.Arc";


// High-level channel repository RPC.
service HostGrpc {

    // HostSession is full duplex connected between two Planet hosts.
    // The return stream reports completion or status of active requests and will remain open as long as the client stream remains open.
    rpc HostSession(stream Msg) returns (stream Msg);
    
}



enum Const {
    Const_Defs = 0;
    
    // HostSessionCellID is a hard-coded cell ID for the user's session
    // This is the first cell pinned as it allows the host and client to exchange MsgOp_ResolveAndRegister msgs.
    Const_HostSessionCellID = 3;
    
    // RootCellID is a hard-coded cell ID used to pin the root cell for a user.
    Const_RootCellID = 6;

    // TIDBinaryLen is the byte size of a Tx ID ("TID"), a hash with a leading big endian binary time index.
    //
    // This allows TIDs to be naturally sorted chronologically naturally.  
    // This facilitates Tx storage and Tx syndication (time-ordered Tx playback).  This also improves performance.
    // since most operations tend to be in the same time neighborhood, leveraging the db's cache.
    //
    // Byte layout is designed so that TIDs are sortable by their embedded timestamp:
    //    0:6   - Standard UTC timestamp in unix seconds (big endian)
    //    6:8   - Timestamp fraction (big endian)
    //    8:30  - Signature/hash
    Const_TIDBinaryLen = 30;

    // TIDStringLen is the ASCII-compatible string length of a (binary) TID encoded into its base32 form.
    // The encoding used is the geohash base32 alphabet, so that even ascii ordinal string comparisons will correctly sort encoded TIDs by time.
    Const_TIDStringLen = 48;

    // TIDTimestampSz is the number of left-hand bytes in a TID reserved for a time index value.
    Const_TIDTimestampSz = 8;

    // DefaultGrpcServicePort is the TCP port the service HostGrpc should run on by default.
    Const_DefaultGrpcServicePort = 5192;
}





// ValType describes the type of a Cell, an Attr literal, or Attr set collection element type. 
enum ValType {
    ValType_nil                 = 0;
        
    // ValType_AttrSet            = 4; // .ValInt is a AttrSet CellID
    // ValType_NameSet            = 5; // CellID+AttrID+NameID     => Msg.(Type)          Values only 
    // ValType_CellSet            = 6; // CellID+AttrID+CellID     => Cell_NID            AttrSet NIDs only 
    // ValType_Series             = 8; // CellID+AttrID+TSI+FromID => Msg.(Type)          Values only
    // ValType_CellRef            = 20; // .FromID and .SI together identify a cell
    // ValType_CellSetID          = 21; // .ValInt is a CellSet ID (used for SetValType_CellSet)
    
    /******     Untyped primitives      ******/
    
    ValType_int                 = 4; // .ValInt is an untyped int64
    ValType_bytes               = 6; // .ValBuf is an untyped buffer
    ValType_string              = 7; // .ValBuf is an untyped UTF8 string
    
    /******     Typed primitives        ******/
    
    ValType_TID                 = 16; // .ValBuf is a binary TxID
    ValType_SchemaID            = 18; // .ValInt is a SchemaID
    ValType_Blob                = 22; // .ValInt is a Blob ID 
    ValType_DateTime            = 23; // .ValInt is a TimeFS value (1 sec == 1<<16 ticks)
    ValType_Duration            = 24; // .ValInt is a TimeFS delta (1 sec == 1<<16 ticks)
    ValType_AssetURI            = 25; // .ValBuf is a UTF8 asset URI
    ValType_URL                 = 26; // .ValBuf is a UTF8 URL
    
    /******     Builtin protobufs       ******/
    
    ValType_Err                 = 50; // .ValBuf is a Err 
    ValType_DataSegment         = 52; // .ValBuf is an DataSegment
    ValType_Content             = 54; // .ValBuf is an Content
    ValType_CryptoKey           = 56; // .ValBuf is a CryptoKey
    ValType_Txn                 = 58; // .ValBuf is a Txn
    ValType_LoginReq            = 60; // .ValBuf is a LoginReq
    ValType_Defs                = 62; // .ValBuf is a Defs
    ValType_PinReq              = 64; // .ValBuf is a PinReq
    ValType_AttrRange           = 66; // .ValBuf is a AttrRange
    ValType_Link                = 80; // .ValBuf is a Link
    ValType_GeoFix              = 82; // .ValBuf is an GeoFix
    ValType_TRS                 = 84; // .ValBuf is a TRS

    // Clients have above this value to bind their own ValTypeIDs
    ValType_BuiltinMax          = 999;
}




// MsgOp tells a holder of a Msg how to interpret its purpose and fields.
enum MsgOp {
    MsgOp_NoOp = 0;

    // From the client to host, this requests to login to the host.
    // From the host to client, this is a reply with a challenge.
    //
    // Params: 
    //      Msg.ReqID:        client-generated (unique) request ID 
    //      Msg.ValType:      ValType_LoginReq
    //      Msg.ValBuf:       req params
    MsgOp_Login = 1;
    
    // // From the client to host, this is a reply to a host challenge.
    // // From the host to client, this is a reply to auth completion
    // MsgOp_AuthChallenge = 2;
    
    
    /*
    MsgOp.PinCell->   
        <-MsgOp.PushAttr
        ...
        
        <-MsgOp.InsertChildCell (child of pinned cell)
        <-MsgOp.PushAttr
        ...
        
        <-MsgOp.InsertChildCell (child of pinned cell)
        <-MsgOp.PushAttr
        ...
    <-MsgOp.Commit
    
    */

    // MsgOp_ResolveAndRegister allows a client to send the host a set of Defs to the Host, defining all session CellTypes and identifiers.
    //
    // Params: 
    //      Msg.ReqID:      client-generated (unique) request ID 
    //      Msg.ValType:    ValType_Defs
    //      Msg.ValBuf:     Defs (serialized) 
    MsgOp_ResolveAndRegister = 5;
    
    
    // From client to host, this requests a given cell be pinned.
    // From host to client, this is precedes a push of the pinned cell's attributes.
    // Note that the same cell pinned multiple times may not have child cells with matching cell IDs.
    //
    // Params: 
    //      Msg.ReqID:      client-generated (unique) request ID 
    //      Msg.CellID:     CellID being pinned     (host to client, otherwise 0)
    //      Msg.ValType:    ValType_PinReq          (client to host, otherwise nil)
    //      Msg.ValBuf:     PinReq                  (client to host, otherwise nil)
    MsgOp_PinCell = 6;

    // Requests a given CellID to be pinned under a client-generated PinID
    //
    // Params: 
    //      Msg.ReqID:      client-generated (unique) request ID 
    //      Msg.CellID:     which cell
    //      Msg.ValType:    ValType_AttrRange
    //      Msg.ValInt:     cell type ID specifying the AttrSchema (the expected cell and format)
    //MsgOp_PinAttrRange = 8;
    
    //MsgOp_StartTxn =  

    // Used to push attr values.
    // A cell attr item us specified by the host via ReqID+AttrID+SI and its value type via ValType. 
    //
    // Params: 
    //      Msg.ReqID:      originating request ID
    //      Msg.CellID:     which cell is being updated
    //      Msg.AttrID:     which attr is being updated
    //      Msg.ValType:    format of Msg.ValInt / .ValBuf 
    //      Msg.Val*:       attr value
    MsgOp_PushAttr = 10;
    
    // This MsgOp signals the insertion of a new cell.
    // The new cell is either as a child cell or the "content" of the cell being pinned (detected via Msg.CellID == MsgOp_PinCell.CellID).
    // After this message, zero or more MsgOp_PushAttr msgs follow.
    //
    // Params: 
    //      Msg.ReqID:      originating request ID
    //      Msg.CellID:     new cell being added
    //      Msg.ValType:    ValType_SchemaID
    //      Msg.ValInt:     cell schema ID being pushed (specifies which Cell attribs are expected to follow)
    MsgOp_InsertCell = 14;
    
    // Used by the Host to signal that the request associated with ReqID is up to date and in a state to be processed by the client.
    // This msg is typically used to drive UI updates or other aggregate cell dependencies.
    //
    // Params: 
    //      Msg.ReqID:      originating request ID
    //      Msg.CellID:     which cell is an an updated state
    MsgOp_Commit = 24;

    // From the client to host, this signals to cancel the operation(s) associated with the given request ID (PinID). 
    // From the host to client, this signals that the given request ID has been canceled / discarded (and is now closed).
    // if Msg.ValType == ValType_Err, amplifying info in included as to why the request was closed.
    //
    // Params: 
    //      Msg.ReqID:      parent request ID
    //      Msg.ValType:    ValType_Err (or 0)
    MsgOp_CloseReq = 255;
    
}


enum MsgFlags {

    MsgFlags_None = 0;
    
    // CellCheckpoint signals that the cell referenced by this Msg is at a stable state "checkpoint", 
    MsgFlags_CellCheckpoint = 0x001;
    
    // // ReqCheckpoint signals that the request referenced ReqID is at a stable state "checkpoint",
    // MsgFlags_ReqCheckpoint = 0x02;
    
    // ValBufShared signals that this Msg's ValBuf referenced elsewhere and is therefore READ ONLY.
    // This used internally to support Msg pooling / recycling. 
    // When marshaling, this flag is always cleared!
    MsgFlags_ValBufShared = 0x100;
}



message Msg {
    
    // Describes how this Msg should be interpreted
    MsgOp               Op              = 1;
    
    // ReqID specifies a request context. 
    //
    // When a client issues request-side MsgOp (e.g. PinCell, ResolveAndRegister), ReqID specifies a new and uniquely generated ID that is used in subsequent Msgs.
    // If this msg is a reply to a request, ReqID identifies the originating request op.
    uint64              ReqID           = 3;
    
    // CellID identifies the cell associated with Msg.Op.
    uint64              CellID          = 6;
    
    uint64              FromID          = 11;

    int32               AttrID          = 15;

    // SI ("Series Index") associates and binds a value to and int64 key.
    // By convention, this is 48.16 fixed signed fractional seconds (one second == 0x10000 ticks), naming a time duration or timestamp.
    // When naming an absolute timestamp, unix UTC is assumed (0x10000 corresponds to 00:00:01, Jan 1 1970 GMT)
    int64               SI              = 16;    

    // ValType how to interpret ValBuf / ValInt
    int32               ValType         = 20;
    
    // ValBuf and/or ValInt are interpreted according to ValType 
    bytes               ValBuf          = 21;
    int64               ValInt          = 22;

    // Flags contains MsgFlags
    MsgFlags            Flags           = 24;
    
    // Allows a sequence of Msgs to be chained together.
    Msg                 Next            = 32;
}




// Note that element domain uniqueness always implies an SI *and* a FromID.
enum SeriesType {

    // SeriesType_Fixed denotes that a given data model attr URI is bound to a given AttrID and SeriesIndex assignment.
    // AttrSpec.Fixed_SI is used in conjunction with this, allowing the client to wire multiple data model attrs to the same AttrID.
    SeriesType_Fixed = 0;
    
    // SeriesType_I64 denotes that SI values are int64
    SeriesType_I64 = 2;
    
    // SeriesType_Time16 denotes that SI values are signed 48.16 bit time offsets (1 second == 2^16 ticks).
    SeriesType_Time16 = 5;
    
    // SeriesType_UTC16 denotes that SI values are signed 48.16 bit UTC values (1 second == 2^16 ticks).
    SeriesType_UTC16 = 6;
    
    // SeriesType_CellSet denotes that Msg.SI are CellIDs.
    //SeriesType_NameSet = 10;
    //SeriesType_CellSet = 11;

}


// // CellInfo references a particular cell, on a particular planet, and optional type info.
// // 
// // A CellTypeID generally accompanies Cell Pin requests as that specifies the AttrSchema to use.
// message CellInfo {
//     uint64              PlanetID        = 1; // This cell's home store, governance system, and transport syndication
//     uint64              CellID          = 2; // Uniquely identifies a cell on the given PlanetID
//     uint64              CellTypeID      = 4; // Element type when SetTypeID != nil
//     int32               PinID           = 6; // target instance ID of the Cell for pushed sub attr items
//     int32               ParentPinID     = 7; // target instance ID of the Cell to receive update notifications  
// }



message PlanetEpoch {

    // EpochTID is the genesis Tx ID and is only known after this PlanetEpoch is sealed.
    bytes               EpochTID                    = 1;
    
    // EpochEntries contains the entries that bootstrap this epoch
    repeated Msg        EpochEntries                = 2;
    
    // CommonName is the commonly used name for this planet
    string              CommonName                  = 3;
    
    // Points to the next
    //PlanetEpoch         NextEpoch                   = 4;
}



message UserSeat {
    uint64              UserID                  = 2;
    uint64              HomePlanetID            = 4;
}


message LoginReq {

    // A byte string identifying user who is logging in (lot limited to UTF8)
    // This is typically the persistent UID given by the device OS that only changes when the app is reinstalled. 
    bytes               UserUID                 = 1;
}


message Symbol {
    uint64              ID              = 1;
    bytes               Value           = 2;
}


message Defs {
    repeated Symbol     Symbols         = 1;
    repeated AttrSchema Schemas         = 2;
}



// enum AutoPin {
//     AutoPin_0              = 0; // Unless the attr is SeriesType_Fixed, attr sub-ranges must be explicitly pinned.
//     AutoPin_All_Ascending  = 1; // Auto-pins the attr's entire series range when the parent cell is first pinned
//     AutoPin_All_Descending = 2;
//     //AutoPin_Smallest = 2; // Auto pins only the largest SI value
//     //AutoPin_Largest  = 3; // Auto pins only the largest SI value
// }


// AttrSchema is a Cell protocol specifier as well as a data packaging schema.
//
// A client forms a CellAttr tree structure, informing how sub cells should be auto-loaded and updated.
//
// Like a protobuf message, once a AttrSchema is published, its fields ("attributes") cannot change type.
// Otherwise, data corruption is possible.
message AttrSchema {
    
    // AppURI specifies which specific app and optional version should handle requests with this schema.
    // The reserved value "." tells the host to choose the default app registered to handle the below AttrModelURI (common).
    // e.g. 
    //      "."
    //      "planet.tools/vibe.app"
    //      "planet.tools/vibe.app/v1.2022.1"
    //      "planet.tools/hfs.app/v1.2.3"
    string              AppURI = 1;
    
    // AttrModelURI names a particular data model used by this schema, in effect specifying a namespace / scope for the attached Attrs.
    // This URI names a complete data protocol / specification that this collection of AttrSpecs conforms to (and is a subset of).
    // To an implementing app on the Go side, this URI implies a family of valid possible AttrSpecs to choose from. 
    // e.g.
    //      "spotify/v1/artist"
    //      "spotify/v1/album"
    //      "spotify/v1/track"
    //      "filesys/dir"
    //      "filesys/fil"
    string              AttrModelURI = 3;

    // This describes this *particular* AttrSchema, a particular collection of AttrSpecs (and is implicitly scoped within AttrModelURI).
    // The host (and its apps) generally don't even look at this field since "{AttrModelURI}/{Attrs[i].AttrURI}" fully specifies each attr's data model URI.
    // The can use this for internal identification, usually to link this schema to particular cell view binding.
    string              SchemaName = 4;

    // SchemaID is a non-zero, unique, client-generated ID that is bound to this AttrSchema (and registered during RegisterAndResolve).
    // This ID is used in PinReq to specify this particular AttrSchema and persists for the duration of the host session.
    int32               SchemaID = 6; // [(gogoproto.customname) = "SchemaID"];

    // Attrs binds a set of AttrSpecs to this SchemaURI.
    repeated AttrSpec   Attrs = 8;

}

// message AttrEnum {
//     int64  Index = 1;
//     string Name  = 2;
// }

// AttrSpec binds an app data model attr URI to a client-provided AttrID, corresponding to a handler on the client side (typically a UI element).
message AttrSpec {


    // AttrURI is a self-describing URI scoped within the parent's AttrModelURI.
    // It communicates a purpose or role, for a particular usage context of the attr.
    // It originates from an app data model spec and allows the host to associate an app attr to a client-provided AttrID (and SI when SeriesType == Fixed).
    // e.g. for AttrSchema.AttrModelURI == "hfs1/directory"
    //      "v1/creation-time"
    //      "v1/thumbnail.glyph"
    //      "v1/detailed.glyph"
    //      "v1/name"
    //      "v1/status"
    //      "v1/item-count"
    string              AttrURI = 2;

    // AttrID is a non-zero, client-generated ID that is bound to the given AttrURI during RegisterAndResolve.
    // This identifies which attr is being updated in a PushAttr Msg and can be thought of as a binding to a given UI entity.
    // Multiple AttrURIs can be bound to the same AttrID and is useful when funneling multiple data model attrs to a single UI element for unified handling.
    int32               AttrID = 4;

    // SeriesType specifies how the client interprets the attr domain SeriesIndex ("SI") integer.
    // Scalar (non-array-like) attrs are typically SeriesType_Fixed since a particular SI value is fixed or "hard-wired" to the given AttrURI.
    SeriesType          SeriesType = 6;
    
    // BoundSI specifies which SI value this fixed attr is "hard-wired" to, meaning that a PushAttr Msg has its SI field set to this value. 
    // Only used / applicable when SeriesType == SeriesType_Fixed.
    int64               BoundSI = 7;
    
    // Specifies the attr item / element value type (this is what shows up in Msg.ValType)
    // If omitted, ValTypeID is assumed to be a built-in type (ValType_XXX). 
    //string              ValTypeURI = 12;
    
    // ValTypeID is standard ValType enum or a client-generated ID that is bound to the given ValTypeURI.
    // This ID is placed in Msg.ValType in a MsgOp_PushAttr msg.
    int32               ValTypeID = 13;
    
}



// PinReq is a client request to "pin" a cell, meaning selected attrs and child cells will be pushed to the client.  
message PinReq {

    // Specifies the request that pushed PinCell to the client, providing context for the cell to be pinned.
    // Set to 0 if PinCell and/or PinURI implies that no parent req exists.
    uint64              ParentReqID = 1;
    
    // URI associated with this pin request (usually omitted since ParentReqID & PinCell specify the cell to be pinned) 
    string              PinURI = 3;
        
    // Cell ID to be pinned (or 0 if PinURI does not require a cell ID)
    uint64              PinCell = 5;
    
    // AttrSchema ID to apply on the cell being pinned, specifying which attrs of the target cell will be pushed to the client.
    int32               ContentSchema = 7; 
    
    // Specifies which child cell types should be pushed (and which attr schema they should be pushed with).
    // If empty, no child cells are pushed.
    repeated int32      ChildSchemas = 9; 
    
    // Explicit list of SI values or CellIDs to be pinned
    //repeated uint64     CellIDs         = 15;
}


message AttrRange {

    
    // Explicit list of SI values to be pinned
    //repeated uint64     ExplicitSIs     = 15;
    
    // If set, *all* Attr items are pinned.
    //bool                AllItems        = 2;
    
    // Specifies the bounding attr SI range to consider (inclusive).
    // Time series sequences are always emitted from highest (newest) to lowest (oldest).
    // If both values are 0, no min/max limit is considered to be set.
    // uint64              SI_Min          = 20;
    // uint64              SI_Max          = 21;
    
    // Specifies what time series index to start and stop reading at (inclusive).
    uint64              SI_SeekTo       = 24;
    uint64              SI_StopAt       = 25;

    // If set, this limits the number of entries returned for each unique from.cell.attr.  (0 denotes unlimited)
    uint64              SI_BatchLimit   = 27;
}


enum GeoModel {
    GeoModel_Sphere = 0;
}

message GeoFix {
    GeoModel            Model           = 1;
    
    double              Lat             = 4; // degrees
    double              Lng             = 5; // degrees
    double              Alt             = 6; // meters
    
    float               AltROU          = 10; // radius of uncertainty (meters)
    float               PosROU          = 11; // radius of uncertainty (meters)
}


// Content is an extensible content wrapper, offering an optional accompanying MIME type.
message Content {

    // uint64              ByteSz = 2;
    // int64               BlobID = 3;
    // uint64              TSI             = 2;
    
    bytes               ContentData     = 3;
    string              ContentType     = 4; // MIME type (or '/' separated type pathname)
    int64               ContentTypeID   = 5; // Symbol ID for ContentType
    
    int64               LinksCellID     = 10; // CellSetID with elements AttrSchemaID_CellBase (or nil)
    
    
    GeoFix              Location        = 11;
    
    //uint64 TimeScale   = 4; // How many TSI ticks there are per second (or 0 if n/a)
    
}


// CryptoKitID identifies an encryption suite that implements ski.CryptoKit
enum CryptoKitID {
    CryptoKit_Nil             = 0;
    CryptoKit_SecretBox_NaCl  = 100;
    CryptoKit_AsymMsg_NaCl    = 101;
    CryptoKit_Signing_NaCl    = 102;
    CryptoKit_Signing_ED25519 = 202;

}




message CryptoKey {
    CryptoKitID         CryptoKitID     = 1;
    bytes               KeyBytes        = 4;
}

message Link {
    string              ShapeURI      = 1;
    string              SkinURI       = 2;
    string              URL           = 5;
    string              Label         = 7;
    string              Desc          = 10;
    string              Tags          = 12; //  Comma-delimited list of tags
}




message TRS {

    enum VisualScaleMode {
        AutoScale  = 0;
        FixedScale = 1;
    }
    
    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
    double              X1                          = 41;
    double              X2                          = 42;
    double              X3                          = 43;
    
    // Specifies how scale dynamically changes based on observer position.
    VisualScaleMode     ScaleMode                   = 50;
    
    // Scale1..3 express the scale of this placement.
    // If all three values are 0, they are all implicitly 1.
    // If Scale2 or Scale3 == 0, then it is implicitly Scale1.
    float               Scale1                      = 51;
    float               Scale2                      = 52;
    float               Scale3                      = 53;

    // Rotate1 - Rotate3 the orientation of this placement using Euler angles.
    float               Rotate1                     = 61;
    float               Rotate2                     = 62;
    float               Rotate3                     = 63;
                
}





message FeedParams {
    float              UpdateIntervalMin = 2;
    float              UpdateIntervalMax = 3;
}

message DataSegment {


    uint64              ByteOfs = 5;
    uint64              ByteSz = 6;
    bytes               InlineData = 7;
    string              StreamURI  = 9;
    
    int64               BlobID = 10;


}







// ErrCode expresses status and error codes.
enum ErrCode {
    ErrCode_NoErr                       = 0;

    ErrCode_UnnamedErr                  = 5000;
    ErrCode_InternalErr                 = 5001;
    ErrCode_UnsupportedOp               = 5002;
    ErrCode_Unimplemented               = 5003;
    ErrCode_ReqCanceled                 = 5004;
    ErrCode_ShuttingDown                = 5005;
    ErrCode_Disconnected                = 5006;
    ErrCode_InvalidLogin                = 5007;
    
    ErrCode_ReqNotFound                 = 5010;
    ErrCode_InvalidReq                  = 5020;
    ErrCode_InvalidURI                  = 5021;
    ErrCode_BadValue                    = 5022;

    ErrCode_NothingToCommit             = 5030;
    ErrCode_CommitFailed                = 5031;
    ErrCode_PlanetNotFound              = 5032;
    ErrCode_PlanetFailure               = 5033;
    ErrCode_AppNotFound                 = 5034;
    ErrCode_NoAttrsFound                = 5036;
    ErrCode_MalformedTx                 = 5040;

    ErrCode_TypeNotFound                = 5050;
    ErrCode_TypeNotRegistered           = 5051;
    ErrCode_BadSchema                   = 5052;
    ErrCode_DataFailure                 = 5053;
    ErrCode_InvalidCell                 = 5055;
    ErrCode_NotPinnable                 = 5056;   
    
    ErrCode_ViolatesAppendOnly          = 5100;
    ErrCode_InsufficientPermissions     = 5101;

    ErrCode_ChProtocolNotRecognized     = 5201;
}


// Err wraps errors and is typically used in conjunction with MsgOps.ReqCancel
message Err {

    // ErrCode specifying how/why the request was canceled.
                ErrCode             Code                        = 1;

    // Msg is a human-readable info string that offers amplifying info about the given error.
                string              Msg                         = 2;

}