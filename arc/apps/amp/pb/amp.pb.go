// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arc/apps/amp/pb/amp.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayableFlags int32

const (
	Unknown          PlayableFlags = 0
	HasAudio         PlayableFlags = 4096
	HasVideo         PlayableFlags = 8192
	IsLive           PlayableFlags = 1
	IsSeekable       PlayableFlags = 2
	IsUnending       PlayableFlags = 4
	IsStation        PlayableFlags = 16
	IsPodcastEpisode PlayableFlags = 32
	IsAudioBook      PlayableFlags = 64
	RequiresWAN      PlayableFlags = 256
	RequiresLAN      PlayableFlags = 512
)

var PlayableFlags_name = map[int32]string{
	0:    "Unknown",
	4096: "HasAudio",
	8192: "HasVideo",
	1:    "IsLive",
	2:    "IsSeekable",
	4:    "IsUnending",
	16:   "IsStation",
	32:   "IsPodcastEpisode",
	64:   "IsAudioBook",
	256:  "RequiresWAN",
	512:  "RequiresLAN",
}

var PlayableFlags_value = map[string]int32{
	"Unknown":          0,
	"HasAudio":         4096,
	"HasVideo":         8192,
	"IsLive":           1,
	"IsSeekable":       2,
	"IsUnending":       4,
	"IsStation":        16,
	"IsPodcastEpisode": 32,
	"IsAudioBook":      64,
	"RequiresWAN":      256,
	"RequiresLAN":      512,
}

func (PlayableFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff49bc45fb69231e, []int{0}
}

type LoginInfo struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Pass         string `protobuf:"bytes,2,opt,name=Pass,proto3" json:"Pass,omitempty"`
	TokenValue   string `protobuf:"bytes,3,opt,name=TokenValue,proto3" json:"TokenValue,omitempty"`
	TokenExpires int64  `protobuf:"varint,4,opt,name=TokenExpires,proto3" json:"TokenExpires,omitempty"`
}

func (m *LoginInfo) Reset()      { *m = LoginInfo{} }
func (*LoginInfo) ProtoMessage() {}
func (*LoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff49bc45fb69231e, []int{0}
}
func (m *LoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginInfo.Merge(m, src)
}
func (m *LoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoginInfo proto.InternalMessageInfo

func (m *LoginInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LoginInfo) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *LoginInfo) GetTokenValue() string {
	if m != nil {
		return m.TokenValue
	}
	return ""
}

func (m *LoginInfo) GetTokenExpires() int64 {
	if m != nil {
		return m.TokenExpires
	}
	return 0
}

type MediaProviderInfo struct {
	CommonName           string `protobuf:"bytes,1,opt,name=CommonName,proto3" json:"CommonName,omitempty"`
	RequiresSubscription bool   `protobuf:"varint,2,opt,name=RequiresSubscription,proto3" json:"RequiresSubscription,omitempty"`
	RequiresInternet     bool   `protobuf:"varint,3,opt,name=RequiresInternet,proto3" json:"RequiresInternet,omitempty"`
}

func (m *MediaProviderInfo) Reset()      { *m = MediaProviderInfo{} }
func (*MediaProviderInfo) ProtoMessage() {}
func (*MediaProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff49bc45fb69231e, []int{1}
}
func (m *MediaProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaProviderInfo.Merge(m, src)
}
func (m *MediaProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *MediaProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MediaProviderInfo proto.InternalMessageInfo

func (m *MediaProviderInfo) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *MediaProviderInfo) GetRequiresSubscription() bool {
	if m != nil {
		return m.RequiresSubscription
	}
	return false
}

func (m *MediaProviderInfo) GetRequiresInternet() bool {
	if m != nil {
		return m.RequiresInternet
	}
	return false
}

func init() {
	proto.RegisterEnum("pb.PlayableFlags", PlayableFlags_name, PlayableFlags_value)
	proto.RegisterType((*LoginInfo)(nil), "pb.LoginInfo")
	proto.RegisterType((*MediaProviderInfo)(nil), "pb.MediaProviderInfo")
}

func init() { proto.RegisterFile("arc/apps/amp/pb/amp.proto", fileDescriptor_ff49bc45fb69231e) }

var fileDescriptor_ff49bc45fb69231e = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x6e, 0x13, 0x31,
	0x18, 0x80, 0xcf, 0xd7, 0x28, 0x24, 0x7f, 0x08, 0x18, 0xab, 0x42, 0x61, 0xb1, 0xa2, 0x4c, 0x55,
	0x07, 0x22, 0xc1, 0x03, 0xd0, 0x14, 0x8a, 0x38, 0x29, 0x54, 0xd1, 0x85, 0x94, 0xd9, 0x77, 0xf7,
	0x13, 0x59, 0x49, 0xfc, 0x1b, 0xfb, 0x52, 0x40, 0x2c, 0x79, 0x04, 0x24, 0x5e, 0x02, 0xf1, 0x14,
	0x8c, 0x8c, 0x19, 0x3b, 0x92, 0xcb, 0xc2, 0xd8, 0x47, 0x40, 0x77, 0x4d, 0xa5, 0x20, 0x98, 0xec,
	0xef, 0xfb, 0xa5, 0xdf, 0xdf, 0x60, 0x78, 0xa4, 0x5c, 0xda, 0x57, 0xd6, 0xfa, 0xbe, 0x5a, 0xd8,
	0xbe, 0x4d, 0xca, 0xe3, 0xb1, 0x75, 0x94, 0x93, 0x08, 0x6d, 0xd2, 0xfb, 0x0c, 0xcd, 0x21, 0x4d,
	0xb5, 0x89, 0xcc, 0x3b, 0x12, 0x0f, 0xa1, 0x3e, 0xf1, 0xe8, 0xa2, 0x17, 0x1d, 0xd6, 0x65, 0x47,
	0xcd, 0x78, 0x47, 0x42, 0x40, 0x6d, 0xa4, 0xbc, 0xef, 0x84, 0x95, 0xad, 0xee, 0x42, 0x02, 0xbc,
	0xa1, 0x19, 0x9a, 0x0b, 0x35, 0x5f, 0x62, 0xe7, 0xa0, 0x9a, 0xec, 0x19, 0xd1, 0x83, 0xbb, 0x15,
	0x9d, 0x7d, 0xb4, 0xda, 0xa1, 0xef, 0xd4, 0xba, 0xec, 0xe8, 0x20, 0xfe, 0xcb, 0xf5, 0xbe, 0x32,
	0x78, 0xf0, 0x1a, 0x33, 0xad, 0x46, 0x8e, 0x2e, 0x75, 0x86, 0xae, 0xaa, 0x90, 0x00, 0xcf, 0x69,
	0xb1, 0x20, 0x73, 0xae, 0x16, 0xb8, 0x2b, 0xd9, 0x33, 0xe2, 0x09, 0x1c, 0xc6, 0xf8, 0x7e, 0x59,
	0x6e, 0x18, 0x2f, 0x13, 0x9f, 0x3a, 0x6d, 0x73, 0x4d, 0xa6, 0xaa, 0x6b, 0xc4, 0xff, 0x9d, 0x89,
	0x63, 0xe0, 0xb7, 0x3e, 0x32, 0x39, 0x3a, 0x83, 0x79, 0xd5, 0xdc, 0x88, 0xff, 0xf1, 0xc7, 0x3f,
	0x18, 0xb4, 0x47, 0x73, 0xf5, 0x49, 0x25, 0x73, 0x7c, 0x39, 0x57, 0x53, 0x2f, 0x5a, 0x70, 0x67,
	0x62, 0x66, 0x86, 0x3e, 0x18, 0x1e, 0x88, 0x36, 0x34, 0x5e, 0x29, 0x3f, 0x58, 0x66, 0x9a, 0xf8,
	0xaa, 0xbb, 0xc3, 0x0b, 0x9d, 0x21, 0xf1, 0xd5, 0x89, 0x00, 0xa8, 0x47, 0x7e, 0xa8, 0x2f, 0x91,
	0x33, 0x71, 0x0f, 0x20, 0xf2, 0x63, 0xc4, 0x59, 0xb9, 0x89, 0x87, 0x37, 0x3c, 0x31, 0x68, 0x32,
	0x6d, 0xa6, 0xbc, 0x26, 0xda, 0xd0, 0x8c, 0xfc, 0x38, 0x57, 0x65, 0x21, 0xe7, 0xe2, 0x10, 0x78,
	0xe4, 0x47, 0x94, 0xa5, 0xca, 0xe7, 0x67, 0x56, 0x7b, 0xca, 0x90, 0x77, 0xc5, 0x7d, 0x68, 0x45,
	0x37, 0xaf, 0x9d, 0x12, 0xcd, 0xf8, 0x89, 0xe0, 0xd0, 0xba, 0x4d, 0x7e, 0x3b, 0x38, 0xe7, 0xab,
	0x70, 0xdf, 0x0c, 0x4b, 0x53, 0x3b, 0x7d, 0xb6, 0xde, 0xc8, 0xe0, 0x6a, 0x23, 0x83, 0xeb, 0x8d,
	0x64, 0xab, 0x42, 0xb2, 0x6f, 0x85, 0x64, 0x3f, 0x0b, 0xc9, 0xd6, 0x85, 0x64, 0xbf, 0x0a, 0xc9,
	0x7e, 0x17, 0x32, 0xb8, 0x2e, 0x24, 0xfb, 0xb2, 0x95, 0xc1, 0x7a, 0x2b, 0x83, 0xab, 0xad, 0x0c,
	0xbe, 0x87, 0x8d, 0x81, 0x4b, 0xbd, 0x55, 0x29, 0x26, 0xf5, 0xea, 0x87, 0x3c, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x8e, 0xb7, 0x04, 0x3e, 0x02, 0x00, 0x00,
}

func (x PlayableFlags) String() string {
	s, ok := PlayableFlags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginInfo)
	if !ok {
		that2, ok := that.(LoginInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.Pass != that1.Pass {
		return false
	}
	if this.TokenValue != that1.TokenValue {
		return false
	}
	if this.TokenExpires != that1.TokenExpires {
		return false
	}
	return true
}
func (this *MediaProviderInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MediaProviderInfo)
	if !ok {
		that2, ok := that.(MediaProviderInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonName != that1.CommonName {
		return false
	}
	if this.RequiresSubscription != that1.RequiresSubscription {
		return false
	}
	if this.RequiresInternet != that1.RequiresInternet {
		return false
	}
	return true
}
func (this *LoginInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LoginInfo{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "Pass: "+fmt.Sprintf("%#v", this.Pass)+",\n")
	s = append(s, "TokenValue: "+fmt.Sprintf("%#v", this.TokenValue)+",\n")
	s = append(s, "TokenExpires: "+fmt.Sprintf("%#v", this.TokenExpires)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaProviderInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.MediaProviderInfo{")
	s = append(s, "CommonName: "+fmt.Sprintf("%#v", this.CommonName)+",\n")
	s = append(s, "RequiresSubscription: "+fmt.Sprintf("%#v", this.RequiresSubscription)+",\n")
	s = append(s, "RequiresInternet: "+fmt.Sprintf("%#v", this.RequiresInternet)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAmp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenExpires != 0 {
		i = encodeVarintAmp(dAtA, i, uint64(m.TokenExpires))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenValue) > 0 {
		i -= len(m.TokenValue)
		copy(dAtA[i:], m.TokenValue)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.TokenValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pass) > 0 {
		i -= len(m.Pass)
		copy(dAtA[i:], m.Pass)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.Pass)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MediaProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequiresInternet {
		i--
		if m.RequiresInternet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RequiresSubscription {
		i--
		if m.RequiresSubscription {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintAmp(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	l = len(m.TokenValue)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.TokenExpires != 0 {
		n += 1 + sovAmp(uint64(m.TokenExpires))
	}
	return n
}

func (m *MediaProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovAmp(uint64(l))
	}
	if m.RequiresSubscription {
		n += 2
	}
	if m.RequiresInternet {
		n += 2
	}
	return n
}

func sovAmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmp(x uint64) (n int) {
	return sovAmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginInfo{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Pass:` + fmt.Sprintf("%v", this.Pass) + `,`,
		`TokenValue:` + fmt.Sprintf("%v", this.TokenValue) + `,`,
		`TokenExpires:` + fmt.Sprintf("%v", this.TokenExpires) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaProviderInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaProviderInfo{`,
		`CommonName:` + fmt.Sprintf("%v", this.CommonName) + `,`,
		`RequiresSubscription:` + fmt.Sprintf("%v", this.RequiresSubscription) + `,`,
		`RequiresInternet:` + fmt.Sprintf("%v", this.RequiresInternet) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAmp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExpires", wireType)
			}
			m.TokenExpires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenExpires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiresSubscription", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiresSubscription = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiresInternet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiresInternet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmp = fmt.Errorf("proto: unexpected end of group")
)
